
lcd16x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002568  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002674  08002674  00012674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f4  080026f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080026f4  080026f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f4  080026f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f4  080026f4  000126f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f8  080026f8  000126f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080026fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  0800276c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  0800276c  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008863  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001672  00000000  00000000  000288fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  00029f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001653b  00000000  00000000  0002b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a05a  00000000  00000000  000415db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082854  00000000  00000000  0004b635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cde89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f8  00000000  00000000  000cdedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800265c 	.word	0x0800265c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800265c 	.word	0x0800265c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <I2C_Scan>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_Scan() {
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b098      	sub	sp, #96	; 0x60
 8000160:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 8000162:	4b2b      	ldr	r3, [pc, #172]	; (8000210 <I2C_Scan+0xb4>)
 8000164:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000168:	461d      	mov	r5, r3
 800016a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800016c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800016e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000172:	6020      	str	r0, [r4, #0]
 8000174:	3404      	adds	r4, #4
 8000176:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000178:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800017c:	4618      	mov	r0, r3
 800017e:	f7ff ffe5 	bl	800014c <strlen>
 8000182:	4603      	mov	r3, r0
 8000184:	b29a      	uxth	r2, r3
 8000186:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800018a:	f04f 33ff 	mov.w	r3, #4294967295
 800018e:	4821      	ldr	r0, [pc, #132]	; (8000214 <I2C_Scan+0xb8>)
 8000190:	f001 fc79 	bl	8001a86 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 8000194:	2300      	movs	r3, #0
 8000196:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800019a:	e02f      	b.n	80001fc <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 800019c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80001a0:	005b      	lsls	r3, r3, #1
 80001a2:	b299      	uxth	r1, r3
 80001a4:	230a      	movs	r3, #10
 80001a6:	2201      	movs	r2, #1
 80001a8:	481b      	ldr	r0, [pc, #108]	; (8000218 <I2C_Scan+0xbc>)
 80001aa:	f000 fe7f 	bl	8000eac <HAL_I2C_IsDeviceReady>
 80001ae:	4603      	mov	r3, r0
 80001b0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80001b4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d113      	bne.n	80001e4 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80001bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80001c0:	1d38      	adds	r0, r7, #4
 80001c2:	4a16      	ldr	r2, [pc, #88]	; (800021c <I2C_Scan+0xc0>)
 80001c4:	2140      	movs	r1, #64	; 0x40
 80001c6:	f001 fdfb 	bl	8001dc0 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80001ca:	1d3b      	adds	r3, r7, #4
 80001cc:	4618      	mov	r0, r3
 80001ce:	f7ff ffbd 	bl	800014c <strlen>
 80001d2:	4603      	mov	r3, r0
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	1d39      	adds	r1, r7, #4
 80001d8:	f04f 33ff 	mov.w	r3, #4294967295
 80001dc:	480d      	ldr	r0, [pc, #52]	; (8000214 <I2C_Scan+0xb8>)
 80001de:	f001 fc52 	bl	8001a86 <HAL_UART_Transmit>
 80001e2:	e006      	b.n	80001f2 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart2, (uint8_t*)".", 1, HAL_MAX_DELAY);
 80001e4:	f04f 33ff 	mov.w	r3, #4294967295
 80001e8:	2201      	movs	r2, #1
 80001ea:	490d      	ldr	r1, [pc, #52]	; (8000220 <I2C_Scan+0xc4>)
 80001ec:	4809      	ldr	r0, [pc, #36]	; (8000214 <I2C_Scan+0xb8>)
 80001ee:	f001 fc4a 	bl	8001a86 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 80001f2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80001f6:	3301      	adds	r3, #1
 80001f8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80001fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000200:	2b7f      	cmp	r3, #127	; 0x7f
 8000202:	d9cb      	bls.n	800019c <I2C_Scan+0x40>
        }
    }
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	3760      	adds	r7, #96	; 0x60
 800020a:	46bd      	mov	sp, r7
 800020c:	bdb0      	pop	{r4, r5, r7, pc}
 800020e:	bf00      	nop
 8000210:	08002680 	.word	0x08002680
 8000214:	200000ec 	.word	0x200000ec
 8000218:	20000098 	.word	0x20000098
 800021c:	08002674 	.word	0x08002674
 8000220:	0800267c 	.word	0x0800267c

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fa32 	bl	8000690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f809 	bl	8000242 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f8a4 	bl	800037c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000234:	f000 f84a 	bl	80002cc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000238:	f000 f876 	bl	8000328 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  I2C_Scan();
 800023c:	f7ff ff8e 	bl	800015c <I2C_Scan>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	e7fe      	b.n	8000240 <main+0x1c>

08000242 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000242:	b580      	push	{r7, lr}
 8000244:	b090      	sub	sp, #64	; 0x40
 8000246:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000248:	f107 0318 	add.w	r3, r7, #24
 800024c:	2228      	movs	r2, #40	; 0x28
 800024e:	2100      	movs	r1, #0
 8000250:	4618      	mov	r0, r3
 8000252:	f001 fdad 	bl	8001db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]
 8000262:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000264:	2301      	movs	r3, #1
 8000266:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000280:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000284:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	4618      	mov	r0, r3
 800028c:	f000 ff94 	bl	80011b8 <HAL_RCC_OscConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000296:	f000 f89f 	bl	80003d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029a:	230f      	movs	r3, #15
 800029c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029e:	2302      	movs	r3, #2
 80002a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2102      	movs	r1, #2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 f9ff 	bl	80016b8 <HAL_RCC_ClockConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002c0:	f000 f88a 	bl	80003d8 <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3740      	adds	r7, #64	; 0x40
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <MX_I2C1_Init+0x50>)
 80002d2:	4a13      	ldr	r2, [pc, #76]	; (8000320 <MX_I2C1_Init+0x54>)
 80002d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_I2C1_Init+0x50>)
 80002d8:	4a12      	ldr	r2, [pc, #72]	; (8000324 <MX_I2C1_Init+0x58>)
 80002da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <MX_I2C1_Init+0x50>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_I2C1_Init+0x50>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <MX_I2C1_Init+0x50>)
 80002ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <MX_I2C1_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <MX_I2C1_Init+0x50>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <MX_I2C1_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_I2C1_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <MX_I2C1_Init+0x50>)
 800030a:	f000 fc8b 	bl	8000c24 <HAL_I2C_Init>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000314:	f000 f860 	bl	80003d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000098 	.word	0x20000098
 8000320:	40005400 	.word	0x40005400
 8000324:	000186a0 	.word	0x000186a0

08000328 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <MX_USART2_UART_Init+0x4c>)
 800032e:	4a12      	ldr	r2, [pc, #72]	; (8000378 <MX_USART2_UART_Init+0x50>)
 8000330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000332:	4b10      	ldr	r3, [pc, #64]	; (8000374 <MX_USART2_UART_Init+0x4c>)
 8000334:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_USART2_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_USART2_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <MX_USART2_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_USART2_UART_Init+0x4c>)
 800034e:	220c      	movs	r2, #12
 8000350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000352:	4b08      	ldr	r3, [pc, #32]	; (8000374 <MX_USART2_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_USART2_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800035e:	4805      	ldr	r0, [pc, #20]	; (8000374 <MX_USART2_UART_Init+0x4c>)
 8000360:	f001 fb44 	bl	80019ec <HAL_UART_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800036a:	f000 f835 	bl	80003d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200000ec 	.word	0x200000ec
 8000378:	40004400 	.word	0x40004400

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_GPIO_Init+0x58>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a13      	ldr	r2, [pc, #76]	; (80003d4 <MX_GPIO_Init+0x58>)
 8000388:	f043 0320 	orr.w	r3, r3, #32
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_GPIO_Init+0x58>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f003 0320 	and.w	r3, r3, #32
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_GPIO_Init+0x58>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <MX_GPIO_Init+0x58>)
 80003a0:	f043 0304 	orr.w	r3, r3, #4
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <MX_GPIO_Init+0x58>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f003 0304 	and.w	r3, r3, #4
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <MX_GPIO_Init+0x58>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <MX_GPIO_Init+0x58>)
 80003b8:	f043 0308 	orr.w	r3, r3, #8
 80003bc:	6193      	str	r3, [r2, #24]
 80003be:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <MX_GPIO_Init+0x58>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f003 0308 	and.w	r3, r3, #8
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

}
 80003ca:	bf00      	nop
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	40021000 	.word	0x40021000

080003d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003dc:	b672      	cpsid	i
}
 80003de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <Error_Handler+0x8>
	...

080003e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <HAL_MspInit+0x5c>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a14      	ldr	r2, [pc, #80]	; (8000440 <HAL_MspInit+0x5c>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <HAL_MspInit+0x5c>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <HAL_MspInit+0x5c>)
 8000408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800040c:	61d3      	str	r3, [r2, #28]
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <HAL_MspInit+0x60>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	4a04      	ldr	r2, [pc, #16]	; (8000444 <HAL_MspInit+0x60>)
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	40021000 	.word	0x40021000
 8000444:	40010000 	.word	0x40010000

08000448 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	; 0x28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a1d      	ldr	r2, [pc, #116]	; (80004d8 <HAL_I2C_MspInit+0x90>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d132      	bne.n	80004ce <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <HAL_I2C_MspInit+0x94>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a1b      	ldr	r2, [pc, #108]	; (80004dc <HAL_I2C_MspInit+0x94>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b19      	ldr	r3, [pc, #100]	; (80004dc <HAL_I2C_MspInit+0x94>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	613b      	str	r3, [r7, #16]
 800047e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000480:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000486:	2312      	movs	r3, #18
 8000488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800048a:	2303      	movs	r3, #3
 800048c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048e:	f107 0314 	add.w	r3, r7, #20
 8000492:	4619      	mov	r1, r3
 8000494:	4812      	ldr	r0, [pc, #72]	; (80004e0 <HAL_I2C_MspInit+0x98>)
 8000496:	f000 fa41 	bl	800091c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <HAL_I2C_MspInit+0x9c>)
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	627b      	str	r3, [r7, #36]	; 0x24
 80004a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004a6:	627b      	str	r3, [r7, #36]	; 0x24
 80004a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004aa:	f043 0302 	orr.w	r3, r3, #2
 80004ae:	627b      	str	r3, [r7, #36]	; 0x24
 80004b0:	4a0c      	ldr	r2, [pc, #48]	; (80004e4 <HAL_I2C_MspInit+0x9c>)
 80004b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <HAL_I2C_MspInit+0x94>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a08      	ldr	r2, [pc, #32]	; (80004dc <HAL_I2C_MspInit+0x94>)
 80004bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <HAL_I2C_MspInit+0x94>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004ce:	bf00      	nop
 80004d0:	3728      	adds	r7, #40	; 0x28
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40005400 	.word	0x40005400
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010c00 	.word	0x40010c00
 80004e4:	40010000 	.word	0x40010000

080004e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <HAL_UART_MspInit+0x88>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d12f      	bne.n	8000568 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <HAL_UART_MspInit+0x8c>)
 800050a:	69db      	ldr	r3, [r3, #28]
 800050c:	4a19      	ldr	r2, [pc, #100]	; (8000574 <HAL_UART_MspInit+0x8c>)
 800050e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000512:	61d3      	str	r3, [r2, #28]
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <HAL_UART_MspInit+0x8c>)
 8000516:	69db      	ldr	r3, [r3, #28]
 8000518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <HAL_UART_MspInit+0x8c>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a13      	ldr	r2, [pc, #76]	; (8000574 <HAL_UART_MspInit+0x8c>)
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <HAL_UART_MspInit+0x8c>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000538:	2304      	movs	r3, #4
 800053a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053c:	2302      	movs	r3, #2
 800053e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000540:	2303      	movs	r3, #3
 8000542:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	480b      	ldr	r0, [pc, #44]	; (8000578 <HAL_UART_MspInit+0x90>)
 800054c:	f000 f9e6 	bl	800091c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000550:	2308      	movs	r3, #8
 8000552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <HAL_UART_MspInit+0x90>)
 8000564:	f000 f9da 	bl	800091c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40004400 	.word	0x40004400
 8000574:	40021000 	.word	0x40021000
 8000578:	40010800 	.word	0x40010800

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <NMI_Handler+0x4>

08000582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <HardFault_Handler+0x4>

08000588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <MemManage_Handler+0x4>

0800058e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <BusFault_Handler+0x4>

08000594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <UsageFault_Handler+0x4>

0800059a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c2:	f000 f8ab 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d4:	4a14      	ldr	r2, [pc, #80]	; (8000628 <_sbrk+0x5c>)
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <_sbrk+0x60>)
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d102      	bne.n	80005ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <_sbrk+0x64>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <_sbrk+0x68>)
 80005ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <_sbrk+0x64>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d207      	bcs.n	800060c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005fc:	f001 fbae 	bl	8001d5c <__errno>
 8000600:	4603      	mov	r3, r0
 8000602:	220c      	movs	r2, #12
 8000604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	e009      	b.n	8000620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	4a05      	ldr	r2, [pc, #20]	; (8000630 <_sbrk+0x64>)
 800061c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800061e:	68fb      	ldr	r3, [r7, #12]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20005000 	.word	0x20005000
 800062c:	00000400 	.word	0x00000400
 8000630:	2000008c 	.word	0x2000008c
 8000634:	20000148 	.word	0x20000148

08000638 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000646:	490d      	ldr	r1, [pc, #52]	; (800067c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000648:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800064c:	e002      	b.n	8000654 <LoopCopyDataInit>

0800064e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000652:	3304      	adds	r3, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000658:	d3f9      	bcc.n	800064e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800065c:	4c0a      	ldr	r4, [pc, #40]	; (8000688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000660:	e001      	b.n	8000666 <LoopFillZerobss>

08000662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000664:	3204      	adds	r2, #4

08000666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000668:	d3fb      	bcc.n	8000662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800066a:	f7ff ffe5 	bl	8000638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800066e:	f001 fb7b 	bl	8001d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000672:	f7ff fdd7 	bl	8000224 <main>
  bx lr
 8000676:	4770      	bx	lr
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800067c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000680:	080026fc 	.word	0x080026fc
  ldr r2, =_sbss
 8000684:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000688:	20000144 	.word	0x20000144

0800068c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC1_2_IRQHandler>
	...

08000690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_Init+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_Init+0x28>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f000 f907 	bl	80008b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a6:	200f      	movs	r0, #15
 80006a8:	f000 f808 	bl	80006bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ac:	f7ff fe9a 	bl	80003e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40022000 	.word	0x40022000

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_InitTick+0x54>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_InitTick+0x58>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f911 	bl	8000902 <HAL_SYSTICK_Config>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e00e      	b.n	8000708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d80a      	bhi.n	8000706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f0:	2200      	movs	r2, #0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	f000 f8e7 	bl	80008ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <HAL_InitTick+0x5c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	e000      	b.n	8000708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000
 8000714:	20000008 	.word	0x20000008
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <HAL_IncTick+0x20>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000008 	.word	0x20000008
 800073c:	20000130 	.word	0x20000130

08000740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	20000130 	.word	0x20000130

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	; (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	; 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000880:	d301      	bcc.n	8000886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000882:	2301      	movs	r3, #1
 8000884:	e00f      	b.n	80008a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <SysTick_Config+0x40>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088e:	210f      	movs	r1, #15
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f7ff ff90 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <SysTick_Config+0x40>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <SysTick_Config+0x40>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff49 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008dc:	f7ff ff5e 	bl	800079c <__NVIC_GetPriorityGrouping>
 80008e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	6978      	ldr	r0, [r7, #20]
 80008e8:	f7ff ff90 	bl	800080c <NVIC_EncodePriority>
 80008ec:	4602      	mov	r2, r0
 80008ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff5f 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ffb0 	bl	8000870 <SysTick_Config>
 8000910:	4603      	mov	r3, r0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800091c:	b480      	push	{r7}
 800091e:	b08b      	sub	sp, #44	; 0x2c
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800092e:	e169      	b.n	8000c04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000930:	2201      	movs	r2, #1
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	429a      	cmp	r2, r3
 800094a:	f040 8158 	bne.w	8000bfe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	4a9a      	ldr	r2, [pc, #616]	; (8000bbc <HAL_GPIO_Init+0x2a0>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d05e      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 8000958:	4a98      	ldr	r2, [pc, #608]	; (8000bbc <HAL_GPIO_Init+0x2a0>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d875      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 800095e:	4a98      	ldr	r2, [pc, #608]	; (8000bc0 <HAL_GPIO_Init+0x2a4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d058      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 8000964:	4a96      	ldr	r2, [pc, #600]	; (8000bc0 <HAL_GPIO_Init+0x2a4>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d86f      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 800096a:	4a96      	ldr	r2, [pc, #600]	; (8000bc4 <HAL_GPIO_Init+0x2a8>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d052      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 8000970:	4a94      	ldr	r2, [pc, #592]	; (8000bc4 <HAL_GPIO_Init+0x2a8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d869      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000976:	4a94      	ldr	r2, [pc, #592]	; (8000bc8 <HAL_GPIO_Init+0x2ac>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d04c      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 800097c:	4a92      	ldr	r2, [pc, #584]	; (8000bc8 <HAL_GPIO_Init+0x2ac>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d863      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000982:	4a92      	ldr	r2, [pc, #584]	; (8000bcc <HAL_GPIO_Init+0x2b0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d046      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 8000988:	4a90      	ldr	r2, [pc, #576]	; (8000bcc <HAL_GPIO_Init+0x2b0>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d85d      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 800098e:	2b12      	cmp	r3, #18
 8000990:	d82a      	bhi.n	80009e8 <HAL_GPIO_Init+0xcc>
 8000992:	2b12      	cmp	r3, #18
 8000994:	d859      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000996:	a201      	add	r2, pc, #4	; (adr r2, 800099c <HAL_GPIO_Init+0x80>)
 8000998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099c:	08000a17 	.word	0x08000a17
 80009a0:	080009f1 	.word	0x080009f1
 80009a4:	08000a03 	.word	0x08000a03
 80009a8:	08000a45 	.word	0x08000a45
 80009ac:	08000a4b 	.word	0x08000a4b
 80009b0:	08000a4b 	.word	0x08000a4b
 80009b4:	08000a4b 	.word	0x08000a4b
 80009b8:	08000a4b 	.word	0x08000a4b
 80009bc:	08000a4b 	.word	0x08000a4b
 80009c0:	08000a4b 	.word	0x08000a4b
 80009c4:	08000a4b 	.word	0x08000a4b
 80009c8:	08000a4b 	.word	0x08000a4b
 80009cc:	08000a4b 	.word	0x08000a4b
 80009d0:	08000a4b 	.word	0x08000a4b
 80009d4:	08000a4b 	.word	0x08000a4b
 80009d8:	08000a4b 	.word	0x08000a4b
 80009dc:	08000a4b 	.word	0x08000a4b
 80009e0:	080009f9 	.word	0x080009f9
 80009e4:	08000a0d 	.word	0x08000a0d
 80009e8:	4a79      	ldr	r2, [pc, #484]	; (8000bd0 <HAL_GPIO_Init+0x2b4>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d013      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ee:	e02c      	b.n	8000a4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	623b      	str	r3, [r7, #32]
          break;
 80009f6:	e029      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	3304      	adds	r3, #4
 80009fe:	623b      	str	r3, [r7, #32]
          break;
 8000a00:	e024      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	3308      	adds	r3, #8
 8000a08:	623b      	str	r3, [r7, #32]
          break;
 8000a0a:	e01f      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	330c      	adds	r3, #12
 8000a12:	623b      	str	r3, [r7, #32]
          break;
 8000a14:	e01a      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d102      	bne.n	8000a24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	623b      	str	r3, [r7, #32]
          break;
 8000a22:	e013      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d105      	bne.n	8000a38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	69fa      	ldr	r2, [r7, #28]
 8000a34:	611a      	str	r2, [r3, #16]
          break;
 8000a36:	e009      	b.n	8000a4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69fa      	ldr	r2, [r7, #28]
 8000a40:	615a      	str	r2, [r3, #20]
          break;
 8000a42:	e003      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
          break;
 8000a48:	e000      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          break;
 8000a4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	2bff      	cmp	r3, #255	; 0xff
 8000a50:	d801      	bhi.n	8000a56 <HAL_GPIO_Init+0x13a>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	e001      	b.n	8000a5a <HAL_GPIO_Init+0x13e>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	2bff      	cmp	r3, #255	; 0xff
 8000a60:	d802      	bhi.n	8000a68 <HAL_GPIO_Init+0x14c>
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	e002      	b.n	8000a6e <HAL_GPIO_Init+0x152>
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	3b08      	subs	r3, #8
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	210f      	movs	r1, #15
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	401a      	ands	r2, r3
 8000a80:	6a39      	ldr	r1, [r7, #32]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	431a      	orrs	r2, r3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 80b1 	beq.w	8000bfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9c:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <HAL_GPIO_Init+0x2b8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a4c      	ldr	r2, [pc, #304]	; (8000bd4 <HAL_GPIO_Init+0x2b8>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <HAL_GPIO_Init+0x2b8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ab4:	4a48      	ldr	r2, [pc, #288]	; (8000bd8 <HAL_GPIO_Init+0x2bc>)
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	220f      	movs	r2, #15
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a40      	ldr	r2, [pc, #256]	; (8000bdc <HAL_GPIO_Init+0x2c0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d013      	beq.n	8000b08 <HAL_GPIO_Init+0x1ec>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a3f      	ldr	r2, [pc, #252]	; (8000be0 <HAL_GPIO_Init+0x2c4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d00d      	beq.n	8000b04 <HAL_GPIO_Init+0x1e8>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a3e      	ldr	r2, [pc, #248]	; (8000be4 <HAL_GPIO_Init+0x2c8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d007      	beq.n	8000b00 <HAL_GPIO_Init+0x1e4>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a3d      	ldr	r2, [pc, #244]	; (8000be8 <HAL_GPIO_Init+0x2cc>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d101      	bne.n	8000afc <HAL_GPIO_Init+0x1e0>
 8000af8:	2303      	movs	r3, #3
 8000afa:	e006      	b.n	8000b0a <HAL_GPIO_Init+0x1ee>
 8000afc:	2304      	movs	r3, #4
 8000afe:	e004      	b.n	8000b0a <HAL_GPIO_Init+0x1ee>
 8000b00:	2302      	movs	r3, #2
 8000b02:	e002      	b.n	8000b0a <HAL_GPIO_Init+0x1ee>
 8000b04:	2301      	movs	r3, #1
 8000b06:	e000      	b.n	8000b0a <HAL_GPIO_Init+0x1ee>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b0c:	f002 0203 	and.w	r2, r2, #3
 8000b10:	0092      	lsls	r2, r2, #2
 8000b12:	4093      	lsls	r3, r2
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b1a:	492f      	ldr	r1, [pc, #188]	; (8000bd8 <HAL_GPIO_Init+0x2bc>)
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	3302      	adds	r3, #2
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d006      	beq.n	8000b42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b34:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	492c      	ldr	r1, [pc, #176]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	600b      	str	r3, [r1, #0]
 8000b40:	e006      	b.n	8000b50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b42:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	4928      	ldr	r1, [pc, #160]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d006      	beq.n	8000b6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	4922      	ldr	r1, [pc, #136]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	604b      	str	r3, [r1, #4]
 8000b68:	e006      	b.n	8000b78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	491e      	ldr	r1, [pc, #120]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d006      	beq.n	8000b92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	4918      	ldr	r1, [pc, #96]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	608b      	str	r3, [r1, #8]
 8000b90:	e006      	b.n	8000ba0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	4914      	ldr	r1, [pc, #80]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d021      	beq.n	8000bf0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	490e      	ldr	r1, [pc, #56]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	60cb      	str	r3, [r1, #12]
 8000bb8:	e021      	b.n	8000bfe <HAL_GPIO_Init+0x2e2>
 8000bba:	bf00      	nop
 8000bbc:	10320000 	.word	0x10320000
 8000bc0:	10310000 	.word	0x10310000
 8000bc4:	10220000 	.word	0x10220000
 8000bc8:	10210000 	.word	0x10210000
 8000bcc:	10120000 	.word	0x10120000
 8000bd0:	10110000 	.word	0x10110000
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010000 	.word	0x40010000
 8000bdc:	40010800 	.word	0x40010800
 8000be0:	40010c00 	.word	0x40010c00
 8000be4:	40011000 	.word	0x40011000
 8000be8:	40011400 	.word	0x40011400
 8000bec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_GPIO_Init+0x304>)
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	4909      	ldr	r1, [pc, #36]	; (8000c20 <HAL_GPIO_Init+0x304>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	3301      	adds	r3, #1
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f47f ae8e 	bne.w	8000930 <HAL_GPIO_Init+0x14>
  }
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	372c      	adds	r7, #44	; 0x2c
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	40010400 	.word	0x40010400

08000c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e12b      	b.n	8000e8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d106      	bne.n	8000c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fbfc 	bl	8000448 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2224      	movs	r2, #36	; 0x24
 8000c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0201 	bic.w	r2, r2, #1
 8000c66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c88:	f000 fe6a 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 8000c8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	4a81      	ldr	r2, [pc, #516]	; (8000e98 <HAL_I2C_Init+0x274>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d807      	bhi.n	8000ca8 <HAL_I2C_Init+0x84>
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4a80      	ldr	r2, [pc, #512]	; (8000e9c <HAL_I2C_Init+0x278>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	bf94      	ite	ls
 8000ca0:	2301      	movls	r3, #1
 8000ca2:	2300      	movhi	r3, #0
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	e006      	b.n	8000cb6 <HAL_I2C_Init+0x92>
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4a7d      	ldr	r2, [pc, #500]	; (8000ea0 <HAL_I2C_Init+0x27c>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	bf94      	ite	ls
 8000cb0:	2301      	movls	r3, #1
 8000cb2:	2300      	movhi	r3, #0
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e0e7      	b.n	8000e8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4a78      	ldr	r2, [pc, #480]	; (8000ea4 <HAL_I2C_Init+0x280>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	0c9b      	lsrs	r3, r3, #18
 8000cc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6a1b      	ldr	r3, [r3, #32]
 8000ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4a6a      	ldr	r2, [pc, #424]	; (8000e98 <HAL_I2C_Init+0x274>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d802      	bhi.n	8000cf8 <HAL_I2C_Init+0xd4>
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	e009      	b.n	8000d0c <HAL_I2C_Init+0xe8>
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cfe:	fb02 f303 	mul.w	r3, r2, r3
 8000d02:	4a69      	ldr	r2, [pc, #420]	; (8000ea8 <HAL_I2C_Init+0x284>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	099b      	lsrs	r3, r3, #6
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	6812      	ldr	r2, [r2, #0]
 8000d10:	430b      	orrs	r3, r1
 8000d12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	495c      	ldr	r1, [pc, #368]	; (8000e98 <HAL_I2C_Init+0x274>)
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d819      	bhi.n	8000d60 <HAL_I2C_Init+0x13c>
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	1e59      	subs	r1, r3, #1
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d3a:	1c59      	adds	r1, r3, #1
 8000d3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000d40:	400b      	ands	r3, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00a      	beq.n	8000d5c <HAL_I2C_Init+0x138>
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	1e59      	subs	r1, r3, #1
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d54:	3301      	adds	r3, #1
 8000d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d5a:	e051      	b.n	8000e00 <HAL_I2C_Init+0x1dc>
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	e04f      	b.n	8000e00 <HAL_I2C_Init+0x1dc>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d111      	bne.n	8000d8c <HAL_I2C_Init+0x168>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	1e58      	subs	r0, r3, #1
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6859      	ldr	r1, [r3, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	440b      	add	r3, r1
 8000d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bf0c      	ite	eq
 8000d84:	2301      	moveq	r3, #1
 8000d86:	2300      	movne	r3, #0
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	e012      	b.n	8000db2 <HAL_I2C_Init+0x18e>
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	1e58      	subs	r0, r3, #1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6859      	ldr	r1, [r3, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	440b      	add	r3, r1
 8000d9a:	0099      	lsls	r1, r3, #2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000da2:	3301      	adds	r3, #1
 8000da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_I2C_Init+0x196>
 8000db6:	2301      	movs	r3, #1
 8000db8:	e022      	b.n	8000e00 <HAL_I2C_Init+0x1dc>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10e      	bne.n	8000de0 <HAL_I2C_Init+0x1bc>
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	1e58      	subs	r0, r3, #1
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6859      	ldr	r1, [r3, #4]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	440b      	add	r3, r1
 8000dd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dde:	e00f      	b.n	8000e00 <HAL_I2C_Init+0x1dc>
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	1e58      	subs	r0, r3, #1
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6859      	ldr	r1, [r3, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	440b      	add	r3, r1
 8000dee:	0099      	lsls	r1, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000df6:	3301      	adds	r3, #1
 8000df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	6809      	ldr	r1, [r1, #0]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69da      	ldr	r2, [r3, #28]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	6911      	ldr	r1, [r2, #16]
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68d2      	ldr	r2, [r2, #12]
 8000e3a:	4311      	orrs	r1, r2
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	430b      	orrs	r3, r1
 8000e42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695a      	ldr	r2, [r3, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 0201 	orr.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2220      	movs	r2, #32
 8000e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	000186a0 	.word	0x000186a0
 8000e9c:	001e847f 	.word	0x001e847f
 8000ea0:	003d08ff 	.word	0x003d08ff
 8000ea4:	431bde83 	.word	0x431bde83
 8000ea8:	10624dd3 	.word	0x10624dd3

08000eac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff fc40 	bl	8000740 <HAL_GetTick>
 8000ec0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b20      	cmp	r3, #32
 8000ed0:	f040 8111 	bne.w	80010f6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2319      	movs	r3, #25
 8000eda:	2201      	movs	r2, #1
 8000edc:	4988      	ldr	r1, [pc, #544]	; (8001100 <HAL_I2C_IsDeviceReady+0x254>)
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f000 f912 	bl	8001108 <I2C_WaitOnFlagUntilTimeout>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000eea:	2302      	movs	r3, #2
 8000eec:	e104      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d101      	bne.n	8000efc <HAL_I2C_IsDeviceReady+0x50>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	e0fd      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x24c>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2201      	movs	r2, #1
 8000f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d007      	beq.n	8000f22 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f042 0201 	orr.w	r2, r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2224      	movs	r2, #36	; 0x24
 8000f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4a70      	ldr	r2, [pc, #448]	; (8001104 <HAL_I2C_IsDeviceReady+0x258>)
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f54:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f000 f8d0 	bl	8001108 <I2C_WaitOnFlagUntilTimeout>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00d      	beq.n	8000f8a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f7c:	d103      	bne.n	8000f86 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e0b6      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000f8a:	897b      	ldrh	r3, [r7, #10]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000f98:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fbd1 	bl	8000740 <HAL_GetTick>
 8000f9e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	bf0c      	ite	eq
 8000fae:	2301      	moveq	r3, #1
 8000fb0:	2300      	movne	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc4:	bf0c      	ite	eq
 8000fc6:	2301      	moveq	r3, #1
 8000fc8:	2300      	movne	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000fce:	e025      	b.n	800101c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000fd0:	f7ff fbb6 	bl	8000740 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d302      	bcc.n	8000fe6 <HAL_I2C_IsDeviceReady+0x13a>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d103      	bne.n	8000fee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	22a0      	movs	r2, #160	; 0xa0
 8000fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	bf0c      	ite	eq
 8000ffc:	2301      	moveq	r3, #1
 8000ffe:	2300      	movne	r3, #0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001012:	bf0c      	ite	eq
 8001014:	2301      	moveq	r3, #1
 8001016:	2300      	movne	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2ba0      	cmp	r3, #160	; 0xa0
 8001026:	d005      	beq.n	8001034 <HAL_I2C_IsDeviceReady+0x188>
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <HAL_I2C_IsDeviceReady+0x188>
 800102e:	7dbb      	ldrb	r3, [r7, #22]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0cd      	beq.n	8000fd0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2220      	movs	r2, #32
 8001038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b02      	cmp	r3, #2
 8001048:	d129      	bne.n	800109e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001058:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2319      	movs	r3, #25
 8001076:	2201      	movs	r2, #1
 8001078:	4921      	ldr	r1, [pc, #132]	; (8001100 <HAL_I2C_IsDeviceReady+0x254>)
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 f844 	bl	8001108 <I2C_WaitOnFlagUntilTimeout>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e036      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2220      	movs	r2, #32
 800108e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e02c      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80010b6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2319      	movs	r3, #25
 80010be:	2201      	movs	r2, #1
 80010c0:	490f      	ldr	r1, [pc, #60]	; (8001100 <HAL_I2C_IsDeviceReady+0x254>)
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f000 f820 	bl	8001108 <I2C_WaitOnFlagUntilTimeout>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e012      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	3301      	adds	r3, #1
 80010d6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	f4ff af32 	bcc.w	8000f46 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2220      	movs	r2, #32
 80010e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80010f6:	2302      	movs	r3, #2
  }
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	00100002 	.word	0x00100002
 8001104:	ffff0000 	.word	0xffff0000

08001108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	4613      	mov	r3, r2
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001118:	e025      	b.n	8001166 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d021      	beq.n	8001166 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001122:	f7ff fb0d 	bl	8000740 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d302      	bcc.n	8001138 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d116      	bne.n	8001166 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2200      	movs	r2, #0
 800113c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2220      	movs	r2, #32
 8001142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f043 0220 	orr.w	r2, r3, #32
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e023      	b.n	80011ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	0c1b      	lsrs	r3, r3, #16
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b01      	cmp	r3, #1
 800116e:	d10d      	bne.n	800118c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4013      	ands	r3, r2
 800117c:	b29b      	uxth	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	e00c      	b.n	80011a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	43da      	mvns	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4013      	ands	r3, r2
 8001198:	b29b      	uxth	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	bf0c      	ite	eq
 800119e:	2301      	moveq	r3, #1
 80011a0:	2300      	movne	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d0b6      	beq.n	800111a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e26c      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 8087 	beq.w	80012e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011d8:	4b92      	ldr	r3, [pc, #584]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 030c 	and.w	r3, r3, #12
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d00c      	beq.n	80011fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e4:	4b8f      	ldr	r3, [pc, #572]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d112      	bne.n	8001216 <HAL_RCC_OscConfig+0x5e>
 80011f0:	4b8c      	ldr	r3, [pc, #560]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fc:	d10b      	bne.n	8001216 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fe:	4b89      	ldr	r3, [pc, #548]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d06c      	beq.n	80012e4 <HAL_RCC_OscConfig+0x12c>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d168      	bne.n	80012e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e246      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121e:	d106      	bne.n	800122e <HAL_RCC_OscConfig+0x76>
 8001220:	4b80      	ldr	r3, [pc, #512]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a7f      	ldr	r2, [pc, #508]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	e02e      	b.n	800128c <HAL_RCC_OscConfig+0xd4>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x98>
 8001236:	4b7b      	ldr	r3, [pc, #492]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a7a      	ldr	r2, [pc, #488]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 800123c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b78      	ldr	r3, [pc, #480]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a77      	ldr	r2, [pc, #476]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e01d      	b.n	800128c <HAL_RCC_OscConfig+0xd4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0xbc>
 800125a:	4b72      	ldr	r3, [pc, #456]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a71      	ldr	r2, [pc, #452]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b6f      	ldr	r3, [pc, #444]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a6e      	ldr	r2, [pc, #440]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e00b      	b.n	800128c <HAL_RCC_OscConfig+0xd4>
 8001274:	4b6b      	ldr	r3, [pc, #428]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a6a      	ldr	r2, [pc, #424]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 800127a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b68      	ldr	r3, [pc, #416]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a67      	ldr	r2, [pc, #412]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fa54 	bl	8000740 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fa50 	bl	8000740 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e1fa      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	4b5d      	ldr	r3, [pc, #372]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0xe4>
 80012ba:	e014      	b.n	80012e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fa40 	bl	8000740 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fa3c 	bl	8000740 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e1e6      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	4b53      	ldr	r3, [pc, #332]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x10c>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d063      	beq.n	80013ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012f2:	4b4c      	ldr	r3, [pc, #304]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00b      	beq.n	8001316 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012fe:	4b49      	ldr	r3, [pc, #292]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b08      	cmp	r3, #8
 8001308:	d11c      	bne.n	8001344 <HAL_RCC_OscConfig+0x18c>
 800130a:	4b46      	ldr	r3, [pc, #280]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d116      	bne.n	8001344 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	4b43      	ldr	r3, [pc, #268]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_RCC_OscConfig+0x176>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d001      	beq.n	800132e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e1ba      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4939      	ldr	r1, [pc, #228]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	e03a      	b.n	80013ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d020      	beq.n	800138e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134c:	4b36      	ldr	r3, [pc, #216]	; (8001428 <HAL_RCC_OscConfig+0x270>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001352:	f7ff f9f5 	bl	8000740 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135a:	f7ff f9f1 	bl	8000740 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e19b      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001378:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4927      	ldr	r1, [pc, #156]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
 800138c:	e015      	b.n	80013ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_RCC_OscConfig+0x270>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff f9d4 	bl	8000740 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139c:	f7ff f9d0 	bl	8000740 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e17a      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d03a      	beq.n	800143c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d019      	beq.n	8001402 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <HAL_RCC_OscConfig+0x274>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d4:	f7ff f9b4 	bl	8000740 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff f9b0 	bl	8000740 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e15a      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f000 fad8 	bl	80019b0 <RCC_Delay>
 8001400:	e01c      	b.n	800143c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_RCC_OscConfig+0x274>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001408:	f7ff f99a 	bl	8000740 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140e:	e00f      	b.n	8001430 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001410:	f7ff f996 	bl	8000740 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d908      	bls.n	8001430 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e140      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	42420000 	.word	0x42420000
 800142c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	4b9e      	ldr	r3, [pc, #632]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1e9      	bne.n	8001410 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80a6 	beq.w	8001596 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144e:	4b97      	ldr	r3, [pc, #604]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10d      	bne.n	8001476 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b94      	ldr	r3, [pc, #592]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4a93      	ldr	r2, [pc, #588]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	61d3      	str	r3, [r2, #28]
 8001466:	4b91      	ldr	r3, [pc, #580]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001472:	2301      	movs	r3, #1
 8001474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001476:	4b8e      	ldr	r3, [pc, #568]	; (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d118      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001482:	4b8b      	ldr	r3, [pc, #556]	; (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a8a      	ldr	r2, [pc, #552]	; (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148e:	f7ff f957 	bl	8000740 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001496:	f7ff f953 	bl	8000740 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b64      	cmp	r3, #100	; 0x64
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e0fd      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x312>
 80014bc:	4b7b      	ldr	r3, [pc, #492]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a7a      	ldr	r2, [pc, #488]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	e02d      	b.n	8001526 <HAL_RCC_OscConfig+0x36e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x334>
 80014d2:	4b76      	ldr	r3, [pc, #472]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4a75      	ldr	r2, [pc, #468]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	6213      	str	r3, [r2, #32]
 80014de:	4b73      	ldr	r3, [pc, #460]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4a72      	ldr	r2, [pc, #456]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 80014e4:	f023 0304 	bic.w	r3, r3, #4
 80014e8:	6213      	str	r3, [r2, #32]
 80014ea:	e01c      	b.n	8001526 <HAL_RCC_OscConfig+0x36e>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d10c      	bne.n	800150e <HAL_RCC_OscConfig+0x356>
 80014f4:	4b6d      	ldr	r3, [pc, #436]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4a6c      	ldr	r2, [pc, #432]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	6213      	str	r3, [r2, #32]
 8001500:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4a69      	ldr	r2, [pc, #420]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6213      	str	r3, [r2, #32]
 800150c:	e00b      	b.n	8001526 <HAL_RCC_OscConfig+0x36e>
 800150e:	4b67      	ldr	r3, [pc, #412]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	4a66      	ldr	r2, [pc, #408]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	6213      	str	r3, [r2, #32]
 800151a:	4b64      	ldr	r3, [pc, #400]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	4a63      	ldr	r2, [pc, #396]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 8001520:	f023 0304 	bic.w	r3, r3, #4
 8001524:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d015      	beq.n	800155a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152e:	f7ff f907 	bl	8000740 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f7ff f903 	bl	8000740 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f241 3288 	movw	r2, #5000	; 0x1388
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e0ab      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154c:	4b57      	ldr	r3, [pc, #348]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0ee      	beq.n	8001536 <HAL_RCC_OscConfig+0x37e>
 8001558:	e014      	b.n	8001584 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff f8f1 	bl	8000740 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff f8ed 	bl	8000740 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e095      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001578:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1ee      	bne.n	8001562 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001584:	7dfb      	ldrb	r3, [r7, #23]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d105      	bne.n	8001596 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158a:	4b48      	ldr	r3, [pc, #288]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a47      	ldr	r2, [pc, #284]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 8001590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001594:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8081 	beq.w	80016a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a0:	4b42      	ldr	r3, [pc, #264]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 030c 	and.w	r3, r3, #12
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d061      	beq.n	8001670 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d146      	bne.n	8001642 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b4:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <HAL_RCC_OscConfig+0x4fc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff f8c1 	bl	8000740 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c2:	f7ff f8bd 	bl	8000740 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e067      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d4:	4b35      	ldr	r3, [pc, #212]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f0      	bne.n	80015c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e8:	d108      	bne.n	80015fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	492d      	ldr	r1, [pc, #180]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a19      	ldr	r1, [r3, #32]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	430b      	orrs	r3, r1
 800160e:	4927      	ldr	r1, [pc, #156]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <HAL_RCC_OscConfig+0x4fc>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff f891 	bl	8000740 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001622:	f7ff f88d 	bl	8000740 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e037      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x46a>
 8001640:	e02f      	b.n	80016a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_RCC_OscConfig+0x4fc>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff f87a 	bl	8000740 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001650:	f7ff f876 	bl	8000740 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e020      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x498>
 800166e:	e018      	b.n	80016a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e013      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_RCC_OscConfig+0x4f4>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	429a      	cmp	r2, r3
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169a:	429a      	cmp	r2, r3
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40007000 	.word	0x40007000
 80016b4:	42420060 	.word	0x42420060

080016b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0d0      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016cc:	4b6a      	ldr	r3, [pc, #424]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d910      	bls.n	80016fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b67      	ldr	r3, [pc, #412]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 0207 	bic.w	r2, r3, #7
 80016e2:	4965      	ldr	r1, [pc, #404]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b8      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001714:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a58      	ldr	r2, [pc, #352]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800171e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001736:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	494d      	ldr	r1, [pc, #308]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d040      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d115      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07f      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e073      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	4b3d      	ldr	r3, [pc, #244]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e06b      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001796:	4b39      	ldr	r3, [pc, #228]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f023 0203 	bic.w	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4936      	ldr	r1, [pc, #216]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a8:	f7fe ffca 	bl	8000740 <HAL_GetTick>
 80017ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7fe ffc6 	bl	8000740 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e053      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 020c 	and.w	r2, r3, #12
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1eb      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d210      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 0207 	bic.w	r2, r3, #7
 80017ee:	4922      	ldr	r1, [pc, #136]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4916      	ldr	r1, [pc, #88]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490e      	ldr	r1, [pc, #56]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001846:	f000 f821 	bl	800188c <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490a      	ldr	r1, [pc, #40]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1cc>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1d0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe ff28 	bl	80006bc <HAL_InitTick>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40022000 	.word	0x40022000
 800187c:	40021000 	.word	0x40021000
 8001880:	080026a8 	.word	0x080026a8
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	b490      	push	{r4, r7}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001894:	1d3c      	adds	r4, r7, #4
 8001896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800189c:	f240 2301 	movw	r3, #513	; 0x201
 80018a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d002      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x40>
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0x46>
 80018ca:	e02d      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ce:	623b      	str	r3, [r7, #32]
      break;
 80018d0:	e02d      	b.n	800192e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	0c9b      	lsrs	r3, r3, #18
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018de:	4413      	add	r3, r2
 80018e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	0c5b      	lsrs	r3, r3, #17
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018fe:	4413      	add	r3, r2
 8001900:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001904:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <HAL_RCC_GetSysClockFreq+0xb8>)
 800190a:	fb02 f203 	mul.w	r2, r2, r3
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
 8001916:	e004      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <HAL_RCC_GetSysClockFreq+0xbc>)
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	623b      	str	r3, [r7, #32]
      break;
 8001926:	e002      	b.n	800192e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_RCC_GetSysClockFreq+0xb8>)
 800192a:	623b      	str	r3, [r7, #32]
      break;
 800192c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800192e:	6a3b      	ldr	r3, [r7, #32]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3728      	adds	r7, #40	; 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bc90      	pop	{r4, r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	08002698 	.word	0x08002698
 8001940:	40021000 	.word	0x40021000
 8001944:	007a1200 	.word	0x007a1200
 8001948:	003d0900 	.word	0x003d0900

0800194c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001950:	4b02      	ldr	r3, [pc, #8]	; (800195c <HAL_RCC_GetHCLKFreq+0x10>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	20000000 	.word	0x20000000

08001960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001964:	f7ff fff2 	bl	800194c <HAL_RCC_GetHCLKFreq>
 8001968:	4602      	mov	r2, r0
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	4903      	ldr	r1, [pc, #12]	; (8001984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001976:	5ccb      	ldrb	r3, [r1, r3]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000
 8001984:	080026b8 	.word	0x080026b8

08001988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800198c:	f7ff ffde 	bl	800194c <HAL_RCC_GetHCLKFreq>
 8001990:	4602      	mov	r2, r0
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	0adb      	lsrs	r3, r3, #11
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	4903      	ldr	r1, [pc, #12]	; (80019ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000
 80019ac:	080026b8 	.word	0x080026b8

080019b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <RCC_Delay+0x34>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <RCC_Delay+0x38>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	0a5b      	lsrs	r3, r3, #9
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019cc:	bf00      	nop
  }
  while (Delay --);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	60fa      	str	r2, [r7, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f9      	bne.n	80019cc <RCC_Delay+0x1c>
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	20000000 	.word	0x20000000
 80019e8:	10624dd3 	.word	0x10624dd3

080019ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e03f      	b.n	8001a7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d106      	bne.n	8001a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7fe fd68 	bl	80004e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2224      	movs	r2, #36	; 0x24
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f905 	bl	8001c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b08a      	sub	sp, #40	; 0x28
 8001a8a:	af02      	add	r7, sp, #8
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	4613      	mov	r3, r2
 8001a94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b20      	cmp	r3, #32
 8001aa4:	d17c      	bne.n	8001ba0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <HAL_UART_Transmit+0x2c>
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e075      	b.n	8001ba2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_UART_Transmit+0x3e>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e06e      	b.n	8001ba2 <HAL_UART_Transmit+0x11c>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2221      	movs	r2, #33	; 0x21
 8001ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ada:	f7fe fe31 	bl	8000740 <HAL_GetTick>
 8001ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	88fa      	ldrh	r2, [r7, #6]
 8001aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af4:	d108      	bne.n	8001b08 <HAL_UART_Transmit+0x82>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d104      	bne.n	8001b08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	e003      	b.n	8001b10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b18:	e02a      	b.n	8001b70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2200      	movs	r2, #0
 8001b22:	2180      	movs	r1, #128	; 0x80
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f840 	bl	8001baa <UART_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e036      	b.n	8001ba2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10b      	bne.n	8001b52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	e007      	b.n	8001b62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	781a      	ldrb	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1cf      	bne.n	8001b1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2200      	movs	r2, #0
 8001b82:	2140      	movs	r1, #64	; 0x40
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 f810 	bl	8001baa <UART_WaitOnFlagUntilTimeout>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e006      	b.n	8001ba2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2220      	movs	r2, #32
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e000      	b.n	8001ba2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
  }
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bba:	e02c      	b.n	8001c16 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc2:	d028      	beq.n	8001c16 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <UART_WaitOnFlagUntilTimeout+0x30>
 8001bca:	f7fe fdb9 	bl	8000740 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d21d      	bcs.n	8001c16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001be8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2220      	movs	r2, #32
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e00f      	b.n	8001c36 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d0c3      	beq.n	8001bbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c7a:	f023 030c 	bic.w	r3, r3, #12
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	68b9      	ldr	r1, [r7, #8]
 8001c84:	430b      	orrs	r3, r1
 8001c86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699a      	ldr	r2, [r3, #24]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2c      	ldr	r2, [pc, #176]	; (8001d54 <UART_SetConfig+0x114>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d103      	bne.n	8001cb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ca8:	f7ff fe6e 	bl	8001988 <HAL_RCC_GetPCLK2Freq>
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	e002      	b.n	8001cb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cb0:	f7ff fe56 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 8001cb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009a      	lsls	r2, r3, #2
 8001cc0:	441a      	add	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <UART_SetConfig+0x118>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	0119      	lsls	r1, r3, #4
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	009a      	lsls	r2, r3, #2
 8001ce0:	441a      	add	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <UART_SetConfig+0x118>)
 8001cee:	fba3 0302 	umull	r0, r3, r3, r2
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	2064      	movs	r0, #100	; 0x64
 8001cf6:	fb00 f303 	mul.w	r3, r0, r3
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	3332      	adds	r3, #50	; 0x32
 8001d00:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <UART_SetConfig+0x118>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d0c:	4419      	add	r1, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	009a      	lsls	r2, r3, #2
 8001d18:	441a      	add	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <UART_SetConfig+0x118>)
 8001d26:	fba3 0302 	umull	r0, r3, r3, r2
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2064      	movs	r0, #100	; 0x64
 8001d2e:	fb00 f303 	mul.w	r3, r0, r3
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	3332      	adds	r3, #50	; 0x32
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <UART_SetConfig+0x118>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	f003 020f 	and.w	r2, r3, #15
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	440a      	add	r2, r1
 8001d4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40013800 	.word	0x40013800
 8001d58:	51eb851f 	.word	0x51eb851f

08001d5c <__errno>:
 8001d5c:	4b01      	ldr	r3, [pc, #4]	; (8001d64 <__errno+0x8>)
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	2000000c 	.word	0x2000000c

08001d68 <__libc_init_array>:
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	2600      	movs	r6, #0
 8001d6c:	4d0c      	ldr	r5, [pc, #48]	; (8001da0 <__libc_init_array+0x38>)
 8001d6e:	4c0d      	ldr	r4, [pc, #52]	; (8001da4 <__libc_init_array+0x3c>)
 8001d70:	1b64      	subs	r4, r4, r5
 8001d72:	10a4      	asrs	r4, r4, #2
 8001d74:	42a6      	cmp	r6, r4
 8001d76:	d109      	bne.n	8001d8c <__libc_init_array+0x24>
 8001d78:	f000 fc70 	bl	800265c <_init>
 8001d7c:	2600      	movs	r6, #0
 8001d7e:	4d0a      	ldr	r5, [pc, #40]	; (8001da8 <__libc_init_array+0x40>)
 8001d80:	4c0a      	ldr	r4, [pc, #40]	; (8001dac <__libc_init_array+0x44>)
 8001d82:	1b64      	subs	r4, r4, r5
 8001d84:	10a4      	asrs	r4, r4, #2
 8001d86:	42a6      	cmp	r6, r4
 8001d88:	d105      	bne.n	8001d96 <__libc_init_array+0x2e>
 8001d8a:	bd70      	pop	{r4, r5, r6, pc}
 8001d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d90:	4798      	blx	r3
 8001d92:	3601      	adds	r6, #1
 8001d94:	e7ee      	b.n	8001d74 <__libc_init_array+0xc>
 8001d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d9a:	4798      	blx	r3
 8001d9c:	3601      	adds	r6, #1
 8001d9e:	e7f2      	b.n	8001d86 <__libc_init_array+0x1e>
 8001da0:	080026f4 	.word	0x080026f4
 8001da4:	080026f4 	.word	0x080026f4
 8001da8:	080026f4 	.word	0x080026f4
 8001dac:	080026f8 	.word	0x080026f8

08001db0 <memset>:
 8001db0:	4603      	mov	r3, r0
 8001db2:	4402      	add	r2, r0
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d100      	bne.n	8001dba <memset+0xa>
 8001db8:	4770      	bx	lr
 8001dba:	f803 1b01 	strb.w	r1, [r3], #1
 8001dbe:	e7f9      	b.n	8001db4 <memset+0x4>

08001dc0 <sniprintf>:
 8001dc0:	b40c      	push	{r2, r3}
 8001dc2:	b530      	push	{r4, r5, lr}
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <sniprintf+0x64>)
 8001dc6:	1e0c      	subs	r4, r1, #0
 8001dc8:	681d      	ldr	r5, [r3, #0]
 8001dca:	b09d      	sub	sp, #116	; 0x74
 8001dcc:	da08      	bge.n	8001de0 <sniprintf+0x20>
 8001dce:	238b      	movs	r3, #139	; 0x8b
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	602b      	str	r3, [r5, #0]
 8001dd6:	b01d      	add	sp, #116	; 0x74
 8001dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ddc:	b002      	add	sp, #8
 8001dde:	4770      	bx	lr
 8001de0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001de4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001de8:	bf0c      	ite	eq
 8001dea:	4623      	moveq	r3, r4
 8001dec:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001df0:	9304      	str	r3, [sp, #16]
 8001df2:	9307      	str	r3, [sp, #28]
 8001df4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df8:	9002      	str	r0, [sp, #8]
 8001dfa:	9006      	str	r0, [sp, #24]
 8001dfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001e00:	4628      	mov	r0, r5
 8001e02:	ab21      	add	r3, sp, #132	; 0x84
 8001e04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001e06:	a902      	add	r1, sp, #8
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	f000 f869 	bl	8001ee0 <_svfiprintf_r>
 8001e0e:	1c43      	adds	r3, r0, #1
 8001e10:	bfbc      	itt	lt
 8001e12:	238b      	movlt	r3, #139	; 0x8b
 8001e14:	602b      	strlt	r3, [r5, #0]
 8001e16:	2c00      	cmp	r4, #0
 8001e18:	d0dd      	beq.n	8001dd6 <sniprintf+0x16>
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	9b02      	ldr	r3, [sp, #8]
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	e7d9      	b.n	8001dd6 <sniprintf+0x16>
 8001e22:	bf00      	nop
 8001e24:	2000000c 	.word	0x2000000c

08001e28 <__ssputs_r>:
 8001e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e2c:	688e      	ldr	r6, [r1, #8]
 8001e2e:	4682      	mov	sl, r0
 8001e30:	429e      	cmp	r6, r3
 8001e32:	460c      	mov	r4, r1
 8001e34:	4690      	mov	r8, r2
 8001e36:	461f      	mov	r7, r3
 8001e38:	d838      	bhi.n	8001eac <__ssputs_r+0x84>
 8001e3a:	898a      	ldrh	r2, [r1, #12]
 8001e3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e40:	d032      	beq.n	8001ea8 <__ssputs_r+0x80>
 8001e42:	6825      	ldr	r5, [r4, #0]
 8001e44:	6909      	ldr	r1, [r1, #16]
 8001e46:	3301      	adds	r3, #1
 8001e48:	eba5 0901 	sub.w	r9, r5, r1
 8001e4c:	6965      	ldr	r5, [r4, #20]
 8001e4e:	444b      	add	r3, r9
 8001e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e58:	106d      	asrs	r5, r5, #1
 8001e5a:	429d      	cmp	r5, r3
 8001e5c:	bf38      	it	cc
 8001e5e:	461d      	movcc	r5, r3
 8001e60:	0553      	lsls	r3, r2, #21
 8001e62:	d531      	bpl.n	8001ec8 <__ssputs_r+0xa0>
 8001e64:	4629      	mov	r1, r5
 8001e66:	f000 fb53 	bl	8002510 <_malloc_r>
 8001e6a:	4606      	mov	r6, r0
 8001e6c:	b950      	cbnz	r0, 8001e84 <__ssputs_r+0x5c>
 8001e6e:	230c      	movs	r3, #12
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f8ca 3000 	str.w	r3, [sl]
 8001e78:	89a3      	ldrh	r3, [r4, #12]
 8001e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e7e:	81a3      	strh	r3, [r4, #12]
 8001e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e84:	464a      	mov	r2, r9
 8001e86:	6921      	ldr	r1, [r4, #16]
 8001e88:	f000 face 	bl	8002428 <memcpy>
 8001e8c:	89a3      	ldrh	r3, [r4, #12]
 8001e8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e96:	81a3      	strh	r3, [r4, #12]
 8001e98:	6126      	str	r6, [r4, #16]
 8001e9a:	444e      	add	r6, r9
 8001e9c:	6026      	str	r6, [r4, #0]
 8001e9e:	463e      	mov	r6, r7
 8001ea0:	6165      	str	r5, [r4, #20]
 8001ea2:	eba5 0509 	sub.w	r5, r5, r9
 8001ea6:	60a5      	str	r5, [r4, #8]
 8001ea8:	42be      	cmp	r6, r7
 8001eaa:	d900      	bls.n	8001eae <__ssputs_r+0x86>
 8001eac:	463e      	mov	r6, r7
 8001eae:	4632      	mov	r2, r6
 8001eb0:	4641      	mov	r1, r8
 8001eb2:	6820      	ldr	r0, [r4, #0]
 8001eb4:	f000 fac6 	bl	8002444 <memmove>
 8001eb8:	68a3      	ldr	r3, [r4, #8]
 8001eba:	6822      	ldr	r2, [r4, #0]
 8001ebc:	1b9b      	subs	r3, r3, r6
 8001ebe:	4432      	add	r2, r6
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	60a3      	str	r3, [r4, #8]
 8001ec4:	6022      	str	r2, [r4, #0]
 8001ec6:	e7db      	b.n	8001e80 <__ssputs_r+0x58>
 8001ec8:	462a      	mov	r2, r5
 8001eca:	f000 fb7b 	bl	80025c4 <_realloc_r>
 8001ece:	4606      	mov	r6, r0
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	d1e1      	bne.n	8001e98 <__ssputs_r+0x70>
 8001ed4:	4650      	mov	r0, sl
 8001ed6:	6921      	ldr	r1, [r4, #16]
 8001ed8:	f000 face 	bl	8002478 <_free_r>
 8001edc:	e7c7      	b.n	8001e6e <__ssputs_r+0x46>
	...

08001ee0 <_svfiprintf_r>:
 8001ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ee4:	4698      	mov	r8, r3
 8001ee6:	898b      	ldrh	r3, [r1, #12]
 8001ee8:	4607      	mov	r7, r0
 8001eea:	061b      	lsls	r3, r3, #24
 8001eec:	460d      	mov	r5, r1
 8001eee:	4614      	mov	r4, r2
 8001ef0:	b09d      	sub	sp, #116	; 0x74
 8001ef2:	d50e      	bpl.n	8001f12 <_svfiprintf_r+0x32>
 8001ef4:	690b      	ldr	r3, [r1, #16]
 8001ef6:	b963      	cbnz	r3, 8001f12 <_svfiprintf_r+0x32>
 8001ef8:	2140      	movs	r1, #64	; 0x40
 8001efa:	f000 fb09 	bl	8002510 <_malloc_r>
 8001efe:	6028      	str	r0, [r5, #0]
 8001f00:	6128      	str	r0, [r5, #16]
 8001f02:	b920      	cbnz	r0, 8001f0e <_svfiprintf_r+0x2e>
 8001f04:	230c      	movs	r3, #12
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	e0d1      	b.n	80020b2 <_svfiprintf_r+0x1d2>
 8001f0e:	2340      	movs	r3, #64	; 0x40
 8001f10:	616b      	str	r3, [r5, #20]
 8001f12:	2300      	movs	r3, #0
 8001f14:	9309      	str	r3, [sp, #36]	; 0x24
 8001f16:	2320      	movs	r3, #32
 8001f18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f1c:	2330      	movs	r3, #48	; 0x30
 8001f1e:	f04f 0901 	mov.w	r9, #1
 8001f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80020cc <_svfiprintf_r+0x1ec>
 8001f2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f2e:	4623      	mov	r3, r4
 8001f30:	469a      	mov	sl, r3
 8001f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f36:	b10a      	cbz	r2, 8001f3c <_svfiprintf_r+0x5c>
 8001f38:	2a25      	cmp	r2, #37	; 0x25
 8001f3a:	d1f9      	bne.n	8001f30 <_svfiprintf_r+0x50>
 8001f3c:	ebba 0b04 	subs.w	fp, sl, r4
 8001f40:	d00b      	beq.n	8001f5a <_svfiprintf_r+0x7a>
 8001f42:	465b      	mov	r3, fp
 8001f44:	4622      	mov	r2, r4
 8001f46:	4629      	mov	r1, r5
 8001f48:	4638      	mov	r0, r7
 8001f4a:	f7ff ff6d 	bl	8001e28 <__ssputs_r>
 8001f4e:	3001      	adds	r0, #1
 8001f50:	f000 80aa 	beq.w	80020a8 <_svfiprintf_r+0x1c8>
 8001f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f56:	445a      	add	r2, fp
 8001f58:	9209      	str	r2, [sp, #36]	; 0x24
 8001f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80a2 	beq.w	80020a8 <_svfiprintf_r+0x1c8>
 8001f64:	2300      	movs	r3, #0
 8001f66:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f6e:	f10a 0a01 	add.w	sl, sl, #1
 8001f72:	9304      	str	r3, [sp, #16]
 8001f74:	9307      	str	r3, [sp, #28]
 8001f76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f7a:	931a      	str	r3, [sp, #104]	; 0x68
 8001f7c:	4654      	mov	r4, sl
 8001f7e:	2205      	movs	r2, #5
 8001f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f84:	4851      	ldr	r0, [pc, #324]	; (80020cc <_svfiprintf_r+0x1ec>)
 8001f86:	f000 fa41 	bl	800240c <memchr>
 8001f8a:	9a04      	ldr	r2, [sp, #16]
 8001f8c:	b9d8      	cbnz	r0, 8001fc6 <_svfiprintf_r+0xe6>
 8001f8e:	06d0      	lsls	r0, r2, #27
 8001f90:	bf44      	itt	mi
 8001f92:	2320      	movmi	r3, #32
 8001f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f98:	0711      	lsls	r1, r2, #28
 8001f9a:	bf44      	itt	mi
 8001f9c:	232b      	movmi	r3, #43	; 0x2b
 8001f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8001fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8001fa8:	d015      	beq.n	8001fd6 <_svfiprintf_r+0xf6>
 8001faa:	4654      	mov	r4, sl
 8001fac:	2000      	movs	r0, #0
 8001fae:	f04f 0c0a 	mov.w	ip, #10
 8001fb2:	9a07      	ldr	r2, [sp, #28]
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fba:	3b30      	subs	r3, #48	; 0x30
 8001fbc:	2b09      	cmp	r3, #9
 8001fbe:	d94e      	bls.n	800205e <_svfiprintf_r+0x17e>
 8001fc0:	b1b0      	cbz	r0, 8001ff0 <_svfiprintf_r+0x110>
 8001fc2:	9207      	str	r2, [sp, #28]
 8001fc4:	e014      	b.n	8001ff0 <_svfiprintf_r+0x110>
 8001fc6:	eba0 0308 	sub.w	r3, r0, r8
 8001fca:	fa09 f303 	lsl.w	r3, r9, r3
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	46a2      	mov	sl, r4
 8001fd2:	9304      	str	r3, [sp, #16]
 8001fd4:	e7d2      	b.n	8001f7c <_svfiprintf_r+0x9c>
 8001fd6:	9b03      	ldr	r3, [sp, #12]
 8001fd8:	1d19      	adds	r1, r3, #4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	9103      	str	r1, [sp, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bfbb      	ittet	lt
 8001fe2:	425b      	neglt	r3, r3
 8001fe4:	f042 0202 	orrlt.w	r2, r2, #2
 8001fe8:	9307      	strge	r3, [sp, #28]
 8001fea:	9307      	strlt	r3, [sp, #28]
 8001fec:	bfb8      	it	lt
 8001fee:	9204      	strlt	r2, [sp, #16]
 8001ff0:	7823      	ldrb	r3, [r4, #0]
 8001ff2:	2b2e      	cmp	r3, #46	; 0x2e
 8001ff4:	d10c      	bne.n	8002010 <_svfiprintf_r+0x130>
 8001ff6:	7863      	ldrb	r3, [r4, #1]
 8001ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8001ffa:	d135      	bne.n	8002068 <_svfiprintf_r+0x188>
 8001ffc:	9b03      	ldr	r3, [sp, #12]
 8001ffe:	3402      	adds	r4, #2
 8002000:	1d1a      	adds	r2, r3, #4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	9203      	str	r2, [sp, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	bfb8      	it	lt
 800200a:	f04f 33ff 	movlt.w	r3, #4294967295
 800200e:	9305      	str	r3, [sp, #20]
 8002010:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80020dc <_svfiprintf_r+0x1fc>
 8002014:	2203      	movs	r2, #3
 8002016:	4650      	mov	r0, sl
 8002018:	7821      	ldrb	r1, [r4, #0]
 800201a:	f000 f9f7 	bl	800240c <memchr>
 800201e:	b140      	cbz	r0, 8002032 <_svfiprintf_r+0x152>
 8002020:	2340      	movs	r3, #64	; 0x40
 8002022:	eba0 000a 	sub.w	r0, r0, sl
 8002026:	fa03 f000 	lsl.w	r0, r3, r0
 800202a:	9b04      	ldr	r3, [sp, #16]
 800202c:	3401      	adds	r4, #1
 800202e:	4303      	orrs	r3, r0
 8002030:	9304      	str	r3, [sp, #16]
 8002032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002036:	2206      	movs	r2, #6
 8002038:	4825      	ldr	r0, [pc, #148]	; (80020d0 <_svfiprintf_r+0x1f0>)
 800203a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800203e:	f000 f9e5 	bl	800240c <memchr>
 8002042:	2800      	cmp	r0, #0
 8002044:	d038      	beq.n	80020b8 <_svfiprintf_r+0x1d8>
 8002046:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <_svfiprintf_r+0x1f4>)
 8002048:	bb1b      	cbnz	r3, 8002092 <_svfiprintf_r+0x1b2>
 800204a:	9b03      	ldr	r3, [sp, #12]
 800204c:	3307      	adds	r3, #7
 800204e:	f023 0307 	bic.w	r3, r3, #7
 8002052:	3308      	adds	r3, #8
 8002054:	9303      	str	r3, [sp, #12]
 8002056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002058:	4433      	add	r3, r6
 800205a:	9309      	str	r3, [sp, #36]	; 0x24
 800205c:	e767      	b.n	8001f2e <_svfiprintf_r+0x4e>
 800205e:	460c      	mov	r4, r1
 8002060:	2001      	movs	r0, #1
 8002062:	fb0c 3202 	mla	r2, ip, r2, r3
 8002066:	e7a5      	b.n	8001fb4 <_svfiprintf_r+0xd4>
 8002068:	2300      	movs	r3, #0
 800206a:	f04f 0c0a 	mov.w	ip, #10
 800206e:	4619      	mov	r1, r3
 8002070:	3401      	adds	r4, #1
 8002072:	9305      	str	r3, [sp, #20]
 8002074:	4620      	mov	r0, r4
 8002076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800207a:	3a30      	subs	r2, #48	; 0x30
 800207c:	2a09      	cmp	r2, #9
 800207e:	d903      	bls.n	8002088 <_svfiprintf_r+0x1a8>
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0c5      	beq.n	8002010 <_svfiprintf_r+0x130>
 8002084:	9105      	str	r1, [sp, #20]
 8002086:	e7c3      	b.n	8002010 <_svfiprintf_r+0x130>
 8002088:	4604      	mov	r4, r0
 800208a:	2301      	movs	r3, #1
 800208c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002090:	e7f0      	b.n	8002074 <_svfiprintf_r+0x194>
 8002092:	ab03      	add	r3, sp, #12
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	462a      	mov	r2, r5
 8002098:	4638      	mov	r0, r7
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <_svfiprintf_r+0x1f8>)
 800209c:	a904      	add	r1, sp, #16
 800209e:	f3af 8000 	nop.w
 80020a2:	1c42      	adds	r2, r0, #1
 80020a4:	4606      	mov	r6, r0
 80020a6:	d1d6      	bne.n	8002056 <_svfiprintf_r+0x176>
 80020a8:	89ab      	ldrh	r3, [r5, #12]
 80020aa:	065b      	lsls	r3, r3, #25
 80020ac:	f53f af2c 	bmi.w	8001f08 <_svfiprintf_r+0x28>
 80020b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020b2:	b01d      	add	sp, #116	; 0x74
 80020b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020b8:	ab03      	add	r3, sp, #12
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	462a      	mov	r2, r5
 80020be:	4638      	mov	r0, r7
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <_svfiprintf_r+0x1f8>)
 80020c2:	a904      	add	r1, sp, #16
 80020c4:	f000 f87c 	bl	80021c0 <_printf_i>
 80020c8:	e7eb      	b.n	80020a2 <_svfiprintf_r+0x1c2>
 80020ca:	bf00      	nop
 80020cc:	080026c0 	.word	0x080026c0
 80020d0:	080026ca 	.word	0x080026ca
 80020d4:	00000000 	.word	0x00000000
 80020d8:	08001e29 	.word	0x08001e29
 80020dc:	080026c6 	.word	0x080026c6

080020e0 <_printf_common>:
 80020e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020e4:	4616      	mov	r6, r2
 80020e6:	4699      	mov	r9, r3
 80020e8:	688a      	ldr	r2, [r1, #8]
 80020ea:	690b      	ldr	r3, [r1, #16]
 80020ec:	4607      	mov	r7, r0
 80020ee:	4293      	cmp	r3, r2
 80020f0:	bfb8      	it	lt
 80020f2:	4613      	movlt	r3, r2
 80020f4:	6033      	str	r3, [r6, #0]
 80020f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020fa:	460c      	mov	r4, r1
 80020fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002100:	b10a      	cbz	r2, 8002106 <_printf_common+0x26>
 8002102:	3301      	adds	r3, #1
 8002104:	6033      	str	r3, [r6, #0]
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	0699      	lsls	r1, r3, #26
 800210a:	bf42      	ittt	mi
 800210c:	6833      	ldrmi	r3, [r6, #0]
 800210e:	3302      	addmi	r3, #2
 8002110:	6033      	strmi	r3, [r6, #0]
 8002112:	6825      	ldr	r5, [r4, #0]
 8002114:	f015 0506 	ands.w	r5, r5, #6
 8002118:	d106      	bne.n	8002128 <_printf_common+0x48>
 800211a:	f104 0a19 	add.w	sl, r4, #25
 800211e:	68e3      	ldr	r3, [r4, #12]
 8002120:	6832      	ldr	r2, [r6, #0]
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	42ab      	cmp	r3, r5
 8002126:	dc28      	bgt.n	800217a <_printf_common+0x9a>
 8002128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800212c:	1e13      	subs	r3, r2, #0
 800212e:	6822      	ldr	r2, [r4, #0]
 8002130:	bf18      	it	ne
 8002132:	2301      	movne	r3, #1
 8002134:	0692      	lsls	r2, r2, #26
 8002136:	d42d      	bmi.n	8002194 <_printf_common+0xb4>
 8002138:	4649      	mov	r1, r9
 800213a:	4638      	mov	r0, r7
 800213c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002140:	47c0      	blx	r8
 8002142:	3001      	adds	r0, #1
 8002144:	d020      	beq.n	8002188 <_printf_common+0xa8>
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	68e5      	ldr	r5, [r4, #12]
 800214a:	f003 0306 	and.w	r3, r3, #6
 800214e:	2b04      	cmp	r3, #4
 8002150:	bf18      	it	ne
 8002152:	2500      	movne	r5, #0
 8002154:	6832      	ldr	r2, [r6, #0]
 8002156:	f04f 0600 	mov.w	r6, #0
 800215a:	68a3      	ldr	r3, [r4, #8]
 800215c:	bf08      	it	eq
 800215e:	1aad      	subeq	r5, r5, r2
 8002160:	6922      	ldr	r2, [r4, #16]
 8002162:	bf08      	it	eq
 8002164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002168:	4293      	cmp	r3, r2
 800216a:	bfc4      	itt	gt
 800216c:	1a9b      	subgt	r3, r3, r2
 800216e:	18ed      	addgt	r5, r5, r3
 8002170:	341a      	adds	r4, #26
 8002172:	42b5      	cmp	r5, r6
 8002174:	d11a      	bne.n	80021ac <_printf_common+0xcc>
 8002176:	2000      	movs	r0, #0
 8002178:	e008      	b.n	800218c <_printf_common+0xac>
 800217a:	2301      	movs	r3, #1
 800217c:	4652      	mov	r2, sl
 800217e:	4649      	mov	r1, r9
 8002180:	4638      	mov	r0, r7
 8002182:	47c0      	blx	r8
 8002184:	3001      	adds	r0, #1
 8002186:	d103      	bne.n	8002190 <_printf_common+0xb0>
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002190:	3501      	adds	r5, #1
 8002192:	e7c4      	b.n	800211e <_printf_common+0x3e>
 8002194:	2030      	movs	r0, #48	; 0x30
 8002196:	18e1      	adds	r1, r4, r3
 8002198:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021a2:	4422      	add	r2, r4
 80021a4:	3302      	adds	r3, #2
 80021a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021aa:	e7c5      	b.n	8002138 <_printf_common+0x58>
 80021ac:	2301      	movs	r3, #1
 80021ae:	4622      	mov	r2, r4
 80021b0:	4649      	mov	r1, r9
 80021b2:	4638      	mov	r0, r7
 80021b4:	47c0      	blx	r8
 80021b6:	3001      	adds	r0, #1
 80021b8:	d0e6      	beq.n	8002188 <_printf_common+0xa8>
 80021ba:	3601      	adds	r6, #1
 80021bc:	e7d9      	b.n	8002172 <_printf_common+0x92>
	...

080021c0 <_printf_i>:
 80021c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021c4:	460c      	mov	r4, r1
 80021c6:	7e27      	ldrb	r7, [r4, #24]
 80021c8:	4691      	mov	r9, r2
 80021ca:	2f78      	cmp	r7, #120	; 0x78
 80021cc:	4680      	mov	r8, r0
 80021ce:	469a      	mov	sl, r3
 80021d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80021d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021d6:	d807      	bhi.n	80021e8 <_printf_i+0x28>
 80021d8:	2f62      	cmp	r7, #98	; 0x62
 80021da:	d80a      	bhi.n	80021f2 <_printf_i+0x32>
 80021dc:	2f00      	cmp	r7, #0
 80021de:	f000 80d9 	beq.w	8002394 <_printf_i+0x1d4>
 80021e2:	2f58      	cmp	r7, #88	; 0x58
 80021e4:	f000 80a4 	beq.w	8002330 <_printf_i+0x170>
 80021e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80021ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80021f0:	e03a      	b.n	8002268 <_printf_i+0xa8>
 80021f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80021f6:	2b15      	cmp	r3, #21
 80021f8:	d8f6      	bhi.n	80021e8 <_printf_i+0x28>
 80021fa:	a001      	add	r0, pc, #4	; (adr r0, 8002200 <_printf_i+0x40>)
 80021fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002200:	08002259 	.word	0x08002259
 8002204:	0800226d 	.word	0x0800226d
 8002208:	080021e9 	.word	0x080021e9
 800220c:	080021e9 	.word	0x080021e9
 8002210:	080021e9 	.word	0x080021e9
 8002214:	080021e9 	.word	0x080021e9
 8002218:	0800226d 	.word	0x0800226d
 800221c:	080021e9 	.word	0x080021e9
 8002220:	080021e9 	.word	0x080021e9
 8002224:	080021e9 	.word	0x080021e9
 8002228:	080021e9 	.word	0x080021e9
 800222c:	0800237b 	.word	0x0800237b
 8002230:	0800229d 	.word	0x0800229d
 8002234:	0800235d 	.word	0x0800235d
 8002238:	080021e9 	.word	0x080021e9
 800223c:	080021e9 	.word	0x080021e9
 8002240:	0800239d 	.word	0x0800239d
 8002244:	080021e9 	.word	0x080021e9
 8002248:	0800229d 	.word	0x0800229d
 800224c:	080021e9 	.word	0x080021e9
 8002250:	080021e9 	.word	0x080021e9
 8002254:	08002365 	.word	0x08002365
 8002258:	680b      	ldr	r3, [r1, #0]
 800225a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800225e:	1d1a      	adds	r2, r3, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	600a      	str	r2, [r1, #0]
 8002264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002268:	2301      	movs	r3, #1
 800226a:	e0a4      	b.n	80023b6 <_printf_i+0x1f6>
 800226c:	6825      	ldr	r5, [r4, #0]
 800226e:	6808      	ldr	r0, [r1, #0]
 8002270:	062e      	lsls	r6, r5, #24
 8002272:	f100 0304 	add.w	r3, r0, #4
 8002276:	d50a      	bpl.n	800228e <_printf_i+0xce>
 8002278:	6805      	ldr	r5, [r0, #0]
 800227a:	600b      	str	r3, [r1, #0]
 800227c:	2d00      	cmp	r5, #0
 800227e:	da03      	bge.n	8002288 <_printf_i+0xc8>
 8002280:	232d      	movs	r3, #45	; 0x2d
 8002282:	426d      	negs	r5, r5
 8002284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002288:	230a      	movs	r3, #10
 800228a:	485e      	ldr	r0, [pc, #376]	; (8002404 <_printf_i+0x244>)
 800228c:	e019      	b.n	80022c2 <_printf_i+0x102>
 800228e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002292:	6805      	ldr	r5, [r0, #0]
 8002294:	600b      	str	r3, [r1, #0]
 8002296:	bf18      	it	ne
 8002298:	b22d      	sxthne	r5, r5
 800229a:	e7ef      	b.n	800227c <_printf_i+0xbc>
 800229c:	680b      	ldr	r3, [r1, #0]
 800229e:	6825      	ldr	r5, [r4, #0]
 80022a0:	1d18      	adds	r0, r3, #4
 80022a2:	6008      	str	r0, [r1, #0]
 80022a4:	0628      	lsls	r0, r5, #24
 80022a6:	d501      	bpl.n	80022ac <_printf_i+0xec>
 80022a8:	681d      	ldr	r5, [r3, #0]
 80022aa:	e002      	b.n	80022b2 <_printf_i+0xf2>
 80022ac:	0669      	lsls	r1, r5, #25
 80022ae:	d5fb      	bpl.n	80022a8 <_printf_i+0xe8>
 80022b0:	881d      	ldrh	r5, [r3, #0]
 80022b2:	2f6f      	cmp	r7, #111	; 0x6f
 80022b4:	bf0c      	ite	eq
 80022b6:	2308      	moveq	r3, #8
 80022b8:	230a      	movne	r3, #10
 80022ba:	4852      	ldr	r0, [pc, #328]	; (8002404 <_printf_i+0x244>)
 80022bc:	2100      	movs	r1, #0
 80022be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022c2:	6866      	ldr	r6, [r4, #4]
 80022c4:	2e00      	cmp	r6, #0
 80022c6:	bfa8      	it	ge
 80022c8:	6821      	ldrge	r1, [r4, #0]
 80022ca:	60a6      	str	r6, [r4, #8]
 80022cc:	bfa4      	itt	ge
 80022ce:	f021 0104 	bicge.w	r1, r1, #4
 80022d2:	6021      	strge	r1, [r4, #0]
 80022d4:	b90d      	cbnz	r5, 80022da <_printf_i+0x11a>
 80022d6:	2e00      	cmp	r6, #0
 80022d8:	d04d      	beq.n	8002376 <_printf_i+0x1b6>
 80022da:	4616      	mov	r6, r2
 80022dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80022e0:	fb03 5711 	mls	r7, r3, r1, r5
 80022e4:	5dc7      	ldrb	r7, [r0, r7]
 80022e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022ea:	462f      	mov	r7, r5
 80022ec:	42bb      	cmp	r3, r7
 80022ee:	460d      	mov	r5, r1
 80022f0:	d9f4      	bls.n	80022dc <_printf_i+0x11c>
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d10b      	bne.n	800230e <_printf_i+0x14e>
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	07df      	lsls	r7, r3, #31
 80022fa:	d508      	bpl.n	800230e <_printf_i+0x14e>
 80022fc:	6923      	ldr	r3, [r4, #16]
 80022fe:	6861      	ldr	r1, [r4, #4]
 8002300:	4299      	cmp	r1, r3
 8002302:	bfde      	ittt	le
 8002304:	2330      	movle	r3, #48	; 0x30
 8002306:	f806 3c01 	strble.w	r3, [r6, #-1]
 800230a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800230e:	1b92      	subs	r2, r2, r6
 8002310:	6122      	str	r2, [r4, #16]
 8002312:	464b      	mov	r3, r9
 8002314:	4621      	mov	r1, r4
 8002316:	4640      	mov	r0, r8
 8002318:	f8cd a000 	str.w	sl, [sp]
 800231c:	aa03      	add	r2, sp, #12
 800231e:	f7ff fedf 	bl	80020e0 <_printf_common>
 8002322:	3001      	adds	r0, #1
 8002324:	d14c      	bne.n	80023c0 <_printf_i+0x200>
 8002326:	f04f 30ff 	mov.w	r0, #4294967295
 800232a:	b004      	add	sp, #16
 800232c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002330:	4834      	ldr	r0, [pc, #208]	; (8002404 <_printf_i+0x244>)
 8002332:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002336:	680e      	ldr	r6, [r1, #0]
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	f856 5b04 	ldr.w	r5, [r6], #4
 800233e:	061f      	lsls	r7, r3, #24
 8002340:	600e      	str	r6, [r1, #0]
 8002342:	d514      	bpl.n	800236e <_printf_i+0x1ae>
 8002344:	07d9      	lsls	r1, r3, #31
 8002346:	bf44      	itt	mi
 8002348:	f043 0320 	orrmi.w	r3, r3, #32
 800234c:	6023      	strmi	r3, [r4, #0]
 800234e:	b91d      	cbnz	r5, 8002358 <_printf_i+0x198>
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	f023 0320 	bic.w	r3, r3, #32
 8002356:	6023      	str	r3, [r4, #0]
 8002358:	2310      	movs	r3, #16
 800235a:	e7af      	b.n	80022bc <_printf_i+0xfc>
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	f043 0320 	orr.w	r3, r3, #32
 8002362:	6023      	str	r3, [r4, #0]
 8002364:	2378      	movs	r3, #120	; 0x78
 8002366:	4828      	ldr	r0, [pc, #160]	; (8002408 <_printf_i+0x248>)
 8002368:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800236c:	e7e3      	b.n	8002336 <_printf_i+0x176>
 800236e:	065e      	lsls	r6, r3, #25
 8002370:	bf48      	it	mi
 8002372:	b2ad      	uxthmi	r5, r5
 8002374:	e7e6      	b.n	8002344 <_printf_i+0x184>
 8002376:	4616      	mov	r6, r2
 8002378:	e7bb      	b.n	80022f2 <_printf_i+0x132>
 800237a:	680b      	ldr	r3, [r1, #0]
 800237c:	6826      	ldr	r6, [r4, #0]
 800237e:	1d1d      	adds	r5, r3, #4
 8002380:	6960      	ldr	r0, [r4, #20]
 8002382:	600d      	str	r5, [r1, #0]
 8002384:	0635      	lsls	r5, r6, #24
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	d501      	bpl.n	800238e <_printf_i+0x1ce>
 800238a:	6018      	str	r0, [r3, #0]
 800238c:	e002      	b.n	8002394 <_printf_i+0x1d4>
 800238e:	0671      	lsls	r1, r6, #25
 8002390:	d5fb      	bpl.n	800238a <_printf_i+0x1ca>
 8002392:	8018      	strh	r0, [r3, #0]
 8002394:	2300      	movs	r3, #0
 8002396:	4616      	mov	r6, r2
 8002398:	6123      	str	r3, [r4, #16]
 800239a:	e7ba      	b.n	8002312 <_printf_i+0x152>
 800239c:	680b      	ldr	r3, [r1, #0]
 800239e:	1d1a      	adds	r2, r3, #4
 80023a0:	600a      	str	r2, [r1, #0]
 80023a2:	681e      	ldr	r6, [r3, #0]
 80023a4:	2100      	movs	r1, #0
 80023a6:	4630      	mov	r0, r6
 80023a8:	6862      	ldr	r2, [r4, #4]
 80023aa:	f000 f82f 	bl	800240c <memchr>
 80023ae:	b108      	cbz	r0, 80023b4 <_printf_i+0x1f4>
 80023b0:	1b80      	subs	r0, r0, r6
 80023b2:	6060      	str	r0, [r4, #4]
 80023b4:	6863      	ldr	r3, [r4, #4]
 80023b6:	6123      	str	r3, [r4, #16]
 80023b8:	2300      	movs	r3, #0
 80023ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023be:	e7a8      	b.n	8002312 <_printf_i+0x152>
 80023c0:	4632      	mov	r2, r6
 80023c2:	4649      	mov	r1, r9
 80023c4:	4640      	mov	r0, r8
 80023c6:	6923      	ldr	r3, [r4, #16]
 80023c8:	47d0      	blx	sl
 80023ca:	3001      	adds	r0, #1
 80023cc:	d0ab      	beq.n	8002326 <_printf_i+0x166>
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	079b      	lsls	r3, r3, #30
 80023d2:	d413      	bmi.n	80023fc <_printf_i+0x23c>
 80023d4:	68e0      	ldr	r0, [r4, #12]
 80023d6:	9b03      	ldr	r3, [sp, #12]
 80023d8:	4298      	cmp	r0, r3
 80023da:	bfb8      	it	lt
 80023dc:	4618      	movlt	r0, r3
 80023de:	e7a4      	b.n	800232a <_printf_i+0x16a>
 80023e0:	2301      	movs	r3, #1
 80023e2:	4632      	mov	r2, r6
 80023e4:	4649      	mov	r1, r9
 80023e6:	4640      	mov	r0, r8
 80023e8:	47d0      	blx	sl
 80023ea:	3001      	adds	r0, #1
 80023ec:	d09b      	beq.n	8002326 <_printf_i+0x166>
 80023ee:	3501      	adds	r5, #1
 80023f0:	68e3      	ldr	r3, [r4, #12]
 80023f2:	9903      	ldr	r1, [sp, #12]
 80023f4:	1a5b      	subs	r3, r3, r1
 80023f6:	42ab      	cmp	r3, r5
 80023f8:	dcf2      	bgt.n	80023e0 <_printf_i+0x220>
 80023fa:	e7eb      	b.n	80023d4 <_printf_i+0x214>
 80023fc:	2500      	movs	r5, #0
 80023fe:	f104 0619 	add.w	r6, r4, #25
 8002402:	e7f5      	b.n	80023f0 <_printf_i+0x230>
 8002404:	080026d1 	.word	0x080026d1
 8002408:	080026e2 	.word	0x080026e2

0800240c <memchr>:
 800240c:	4603      	mov	r3, r0
 800240e:	b510      	push	{r4, lr}
 8002410:	b2c9      	uxtb	r1, r1
 8002412:	4402      	add	r2, r0
 8002414:	4293      	cmp	r3, r2
 8002416:	4618      	mov	r0, r3
 8002418:	d101      	bne.n	800241e <memchr+0x12>
 800241a:	2000      	movs	r0, #0
 800241c:	e003      	b.n	8002426 <memchr+0x1a>
 800241e:	7804      	ldrb	r4, [r0, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	428c      	cmp	r4, r1
 8002424:	d1f6      	bne.n	8002414 <memchr+0x8>
 8002426:	bd10      	pop	{r4, pc}

08002428 <memcpy>:
 8002428:	440a      	add	r2, r1
 800242a:	4291      	cmp	r1, r2
 800242c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002430:	d100      	bne.n	8002434 <memcpy+0xc>
 8002432:	4770      	bx	lr
 8002434:	b510      	push	{r4, lr}
 8002436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800243a:	4291      	cmp	r1, r2
 800243c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002440:	d1f9      	bne.n	8002436 <memcpy+0xe>
 8002442:	bd10      	pop	{r4, pc}

08002444 <memmove>:
 8002444:	4288      	cmp	r0, r1
 8002446:	b510      	push	{r4, lr}
 8002448:	eb01 0402 	add.w	r4, r1, r2
 800244c:	d902      	bls.n	8002454 <memmove+0x10>
 800244e:	4284      	cmp	r4, r0
 8002450:	4623      	mov	r3, r4
 8002452:	d807      	bhi.n	8002464 <memmove+0x20>
 8002454:	1e43      	subs	r3, r0, #1
 8002456:	42a1      	cmp	r1, r4
 8002458:	d008      	beq.n	800246c <memmove+0x28>
 800245a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800245e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002462:	e7f8      	b.n	8002456 <memmove+0x12>
 8002464:	4601      	mov	r1, r0
 8002466:	4402      	add	r2, r0
 8002468:	428a      	cmp	r2, r1
 800246a:	d100      	bne.n	800246e <memmove+0x2a>
 800246c:	bd10      	pop	{r4, pc}
 800246e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002476:	e7f7      	b.n	8002468 <memmove+0x24>

08002478 <_free_r>:
 8002478:	b538      	push	{r3, r4, r5, lr}
 800247a:	4605      	mov	r5, r0
 800247c:	2900      	cmp	r1, #0
 800247e:	d043      	beq.n	8002508 <_free_r+0x90>
 8002480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002484:	1f0c      	subs	r4, r1, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	bfb8      	it	lt
 800248a:	18e4      	addlt	r4, r4, r3
 800248c:	f000 f8d0 	bl	8002630 <__malloc_lock>
 8002490:	4a1e      	ldr	r2, [pc, #120]	; (800250c <_free_r+0x94>)
 8002492:	6813      	ldr	r3, [r2, #0]
 8002494:	4610      	mov	r0, r2
 8002496:	b933      	cbnz	r3, 80024a6 <_free_r+0x2e>
 8002498:	6063      	str	r3, [r4, #4]
 800249a:	6014      	str	r4, [r2, #0]
 800249c:	4628      	mov	r0, r5
 800249e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024a2:	f000 b8cb 	b.w	800263c <__malloc_unlock>
 80024a6:	42a3      	cmp	r3, r4
 80024a8:	d90a      	bls.n	80024c0 <_free_r+0x48>
 80024aa:	6821      	ldr	r1, [r4, #0]
 80024ac:	1862      	adds	r2, r4, r1
 80024ae:	4293      	cmp	r3, r2
 80024b0:	bf01      	itttt	eq
 80024b2:	681a      	ldreq	r2, [r3, #0]
 80024b4:	685b      	ldreq	r3, [r3, #4]
 80024b6:	1852      	addeq	r2, r2, r1
 80024b8:	6022      	streq	r2, [r4, #0]
 80024ba:	6063      	str	r3, [r4, #4]
 80024bc:	6004      	str	r4, [r0, #0]
 80024be:	e7ed      	b.n	800249c <_free_r+0x24>
 80024c0:	461a      	mov	r2, r3
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	b10b      	cbz	r3, 80024ca <_free_r+0x52>
 80024c6:	42a3      	cmp	r3, r4
 80024c8:	d9fa      	bls.n	80024c0 <_free_r+0x48>
 80024ca:	6811      	ldr	r1, [r2, #0]
 80024cc:	1850      	adds	r0, r2, r1
 80024ce:	42a0      	cmp	r0, r4
 80024d0:	d10b      	bne.n	80024ea <_free_r+0x72>
 80024d2:	6820      	ldr	r0, [r4, #0]
 80024d4:	4401      	add	r1, r0
 80024d6:	1850      	adds	r0, r2, r1
 80024d8:	4283      	cmp	r3, r0
 80024da:	6011      	str	r1, [r2, #0]
 80024dc:	d1de      	bne.n	800249c <_free_r+0x24>
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4401      	add	r1, r0
 80024e4:	6011      	str	r1, [r2, #0]
 80024e6:	6053      	str	r3, [r2, #4]
 80024e8:	e7d8      	b.n	800249c <_free_r+0x24>
 80024ea:	d902      	bls.n	80024f2 <_free_r+0x7a>
 80024ec:	230c      	movs	r3, #12
 80024ee:	602b      	str	r3, [r5, #0]
 80024f0:	e7d4      	b.n	800249c <_free_r+0x24>
 80024f2:	6820      	ldr	r0, [r4, #0]
 80024f4:	1821      	adds	r1, r4, r0
 80024f6:	428b      	cmp	r3, r1
 80024f8:	bf01      	itttt	eq
 80024fa:	6819      	ldreq	r1, [r3, #0]
 80024fc:	685b      	ldreq	r3, [r3, #4]
 80024fe:	1809      	addeq	r1, r1, r0
 8002500:	6021      	streq	r1, [r4, #0]
 8002502:	6063      	str	r3, [r4, #4]
 8002504:	6054      	str	r4, [r2, #4]
 8002506:	e7c9      	b.n	800249c <_free_r+0x24>
 8002508:	bd38      	pop	{r3, r4, r5, pc}
 800250a:	bf00      	nop
 800250c:	20000090 	.word	0x20000090

08002510 <_malloc_r>:
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002512:	1ccd      	adds	r5, r1, #3
 8002514:	f025 0503 	bic.w	r5, r5, #3
 8002518:	3508      	adds	r5, #8
 800251a:	2d0c      	cmp	r5, #12
 800251c:	bf38      	it	cc
 800251e:	250c      	movcc	r5, #12
 8002520:	2d00      	cmp	r5, #0
 8002522:	4606      	mov	r6, r0
 8002524:	db01      	blt.n	800252a <_malloc_r+0x1a>
 8002526:	42a9      	cmp	r1, r5
 8002528:	d903      	bls.n	8002532 <_malloc_r+0x22>
 800252a:	230c      	movs	r3, #12
 800252c:	6033      	str	r3, [r6, #0]
 800252e:	2000      	movs	r0, #0
 8002530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002532:	f000 f87d 	bl	8002630 <__malloc_lock>
 8002536:	4921      	ldr	r1, [pc, #132]	; (80025bc <_malloc_r+0xac>)
 8002538:	680a      	ldr	r2, [r1, #0]
 800253a:	4614      	mov	r4, r2
 800253c:	b99c      	cbnz	r4, 8002566 <_malloc_r+0x56>
 800253e:	4f20      	ldr	r7, [pc, #128]	; (80025c0 <_malloc_r+0xb0>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b923      	cbnz	r3, 800254e <_malloc_r+0x3e>
 8002544:	4621      	mov	r1, r4
 8002546:	4630      	mov	r0, r6
 8002548:	f000 f862 	bl	8002610 <_sbrk_r>
 800254c:	6038      	str	r0, [r7, #0]
 800254e:	4629      	mov	r1, r5
 8002550:	4630      	mov	r0, r6
 8002552:	f000 f85d 	bl	8002610 <_sbrk_r>
 8002556:	1c43      	adds	r3, r0, #1
 8002558:	d123      	bne.n	80025a2 <_malloc_r+0x92>
 800255a:	230c      	movs	r3, #12
 800255c:	4630      	mov	r0, r6
 800255e:	6033      	str	r3, [r6, #0]
 8002560:	f000 f86c 	bl	800263c <__malloc_unlock>
 8002564:	e7e3      	b.n	800252e <_malloc_r+0x1e>
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	1b5b      	subs	r3, r3, r5
 800256a:	d417      	bmi.n	800259c <_malloc_r+0x8c>
 800256c:	2b0b      	cmp	r3, #11
 800256e:	d903      	bls.n	8002578 <_malloc_r+0x68>
 8002570:	6023      	str	r3, [r4, #0]
 8002572:	441c      	add	r4, r3
 8002574:	6025      	str	r5, [r4, #0]
 8002576:	e004      	b.n	8002582 <_malloc_r+0x72>
 8002578:	6863      	ldr	r3, [r4, #4]
 800257a:	42a2      	cmp	r2, r4
 800257c:	bf0c      	ite	eq
 800257e:	600b      	streq	r3, [r1, #0]
 8002580:	6053      	strne	r3, [r2, #4]
 8002582:	4630      	mov	r0, r6
 8002584:	f000 f85a 	bl	800263c <__malloc_unlock>
 8002588:	f104 000b 	add.w	r0, r4, #11
 800258c:	1d23      	adds	r3, r4, #4
 800258e:	f020 0007 	bic.w	r0, r0, #7
 8002592:	1ac2      	subs	r2, r0, r3
 8002594:	d0cc      	beq.n	8002530 <_malloc_r+0x20>
 8002596:	1a1b      	subs	r3, r3, r0
 8002598:	50a3      	str	r3, [r4, r2]
 800259a:	e7c9      	b.n	8002530 <_malloc_r+0x20>
 800259c:	4622      	mov	r2, r4
 800259e:	6864      	ldr	r4, [r4, #4]
 80025a0:	e7cc      	b.n	800253c <_malloc_r+0x2c>
 80025a2:	1cc4      	adds	r4, r0, #3
 80025a4:	f024 0403 	bic.w	r4, r4, #3
 80025a8:	42a0      	cmp	r0, r4
 80025aa:	d0e3      	beq.n	8002574 <_malloc_r+0x64>
 80025ac:	1a21      	subs	r1, r4, r0
 80025ae:	4630      	mov	r0, r6
 80025b0:	f000 f82e 	bl	8002610 <_sbrk_r>
 80025b4:	3001      	adds	r0, #1
 80025b6:	d1dd      	bne.n	8002574 <_malloc_r+0x64>
 80025b8:	e7cf      	b.n	800255a <_malloc_r+0x4a>
 80025ba:	bf00      	nop
 80025bc:	20000090 	.word	0x20000090
 80025c0:	20000094 	.word	0x20000094

080025c4 <_realloc_r>:
 80025c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c6:	4607      	mov	r7, r0
 80025c8:	4614      	mov	r4, r2
 80025ca:	460e      	mov	r6, r1
 80025cc:	b921      	cbnz	r1, 80025d8 <_realloc_r+0x14>
 80025ce:	4611      	mov	r1, r2
 80025d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80025d4:	f7ff bf9c 	b.w	8002510 <_malloc_r>
 80025d8:	b922      	cbnz	r2, 80025e4 <_realloc_r+0x20>
 80025da:	f7ff ff4d 	bl	8002478 <_free_r>
 80025de:	4625      	mov	r5, r4
 80025e0:	4628      	mov	r0, r5
 80025e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025e4:	f000 f830 	bl	8002648 <_malloc_usable_size_r>
 80025e8:	42a0      	cmp	r0, r4
 80025ea:	d20f      	bcs.n	800260c <_realloc_r+0x48>
 80025ec:	4621      	mov	r1, r4
 80025ee:	4638      	mov	r0, r7
 80025f0:	f7ff ff8e 	bl	8002510 <_malloc_r>
 80025f4:	4605      	mov	r5, r0
 80025f6:	2800      	cmp	r0, #0
 80025f8:	d0f2      	beq.n	80025e0 <_realloc_r+0x1c>
 80025fa:	4631      	mov	r1, r6
 80025fc:	4622      	mov	r2, r4
 80025fe:	f7ff ff13 	bl	8002428 <memcpy>
 8002602:	4631      	mov	r1, r6
 8002604:	4638      	mov	r0, r7
 8002606:	f7ff ff37 	bl	8002478 <_free_r>
 800260a:	e7e9      	b.n	80025e0 <_realloc_r+0x1c>
 800260c:	4635      	mov	r5, r6
 800260e:	e7e7      	b.n	80025e0 <_realloc_r+0x1c>

08002610 <_sbrk_r>:
 8002610:	b538      	push	{r3, r4, r5, lr}
 8002612:	2300      	movs	r3, #0
 8002614:	4d05      	ldr	r5, [pc, #20]	; (800262c <_sbrk_r+0x1c>)
 8002616:	4604      	mov	r4, r0
 8002618:	4608      	mov	r0, r1
 800261a:	602b      	str	r3, [r5, #0]
 800261c:	f7fd ffd6 	bl	80005cc <_sbrk>
 8002620:	1c43      	adds	r3, r0, #1
 8002622:	d102      	bne.n	800262a <_sbrk_r+0x1a>
 8002624:	682b      	ldr	r3, [r5, #0]
 8002626:	b103      	cbz	r3, 800262a <_sbrk_r+0x1a>
 8002628:	6023      	str	r3, [r4, #0]
 800262a:	bd38      	pop	{r3, r4, r5, pc}
 800262c:	20000134 	.word	0x20000134

08002630 <__malloc_lock>:
 8002630:	4801      	ldr	r0, [pc, #4]	; (8002638 <__malloc_lock+0x8>)
 8002632:	f000 b811 	b.w	8002658 <__retarget_lock_acquire_recursive>
 8002636:	bf00      	nop
 8002638:	2000013c 	.word	0x2000013c

0800263c <__malloc_unlock>:
 800263c:	4801      	ldr	r0, [pc, #4]	; (8002644 <__malloc_unlock+0x8>)
 800263e:	f000 b80c 	b.w	800265a <__retarget_lock_release_recursive>
 8002642:	bf00      	nop
 8002644:	2000013c 	.word	0x2000013c

08002648 <_malloc_usable_size_r>:
 8002648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800264c:	1f18      	subs	r0, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	bfbc      	itt	lt
 8002652:	580b      	ldrlt	r3, [r1, r0]
 8002654:	18c0      	addlt	r0, r0, r3
 8002656:	4770      	bx	lr

08002658 <__retarget_lock_acquire_recursive>:
 8002658:	4770      	bx	lr

0800265a <__retarget_lock_release_recursive>:
 800265a:	4770      	bx	lr

0800265c <_init>:
 800265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265e:	bf00      	nop
 8002660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002662:	bc08      	pop	{r3}
 8002664:	469e      	mov	lr, r3
 8002666:	4770      	bx	lr

08002668 <_fini>:
 8002668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266a:	bf00      	nop
 800266c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800266e:	bc08      	pop	{r3}
 8002670:	469e      	mov	lr, r3
 8002672:	4770      	bx	lr
